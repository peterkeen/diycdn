#!/bin/bash
set -e
set -o pipefail

export PATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin

apt-get update
apt-get install -y nginx unzip logrotate s3cmd fail2ban unattended-upgrades update-notifier-common sendmail

mkdir -p /var/nginx/cache
rm -rf /var/nginx/cache/*
rm -f /etc/nginx/sites-enabled/default

if [[ ! -f /etc/nginx/dhparam.pem ]]; then
    openssl dhparam -out /etc/nginx/dhparam.pem 2048
fi

systemctl restart nginx 

rm /etc/nginx/certificates.zip

cat <<'EOF' > /root/update_proxy.sh
#!/bin/bash
set -e
set -o pipefail

if [[ -f /etc/nginx/certificates.zip ]]; then
    last_modified=`stat -c %Y /etc/nginx/certificates.zip`
fi

curl -s -S -H 'Authorization: Bearer <%= @current_proxy.api_key %>' "https://cdn.kodos.zrail.net/update?m=$last_modified" | bash 2>&1 | logger -t update-proxy
EOF

chmod +x /root/update_proxy.sh

<% if ENV['PAPERTRAIL_PORT'].present? %>
pushd /tmp

curl -L https://github.com/papertrail/remote_syslog2/releases/download/v0.20/remote_syslog_linux_amd64.tar.gz > remote_syslog.tar.gz

tar xvzf remote_syslog.tar.gz
cp -f remote_syslog/remote_syslog /usr/local/bin || true
popd

cat <<'EOF' > /etc/log_files.yml
files:
  - /var/log/nginx/*.log
destination:
  host: logs.papertrailapp.com
  port: <%= ENV['PAPERTRAIL_PORT'] %>
  protocol: tls
EOF
<% end %>

<% if ENV['PAPERTRAIL_TOKEN'].present? %>
wget -qO - --header="X-Papertrail-Token: <%= ENV['PAPERTRAIL_TOKEN'] %>" \
     https://papertrailapp.com/destinations/<%= ENV['PAPERTRAIL_DESTINATION'] %>/setup.sh > /tmp/setup.sh

bash /tmp/setup.sh -q

curl -L https://raw.githubusercontent.com/papertrail/remote_syslog2/master/examples/remote_syslog.systemd.service > /etc/systemd/system/remote_syslog.service

cat <<'EOF' > /etc/rsyslog.d/00-set-fqdn.conf
$PreserveFQDN on
EOF

systemctl enable remote_syslog.service
systemctl start remote_syslog.service
<% end %>

cat <<EOF > /etc/cron.d/proxy-update
* * * * * root /root/update_proxy.sh
EOF

cat <<EOF > /etc/apt/apt.conf.d/20auto-upgrades
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Unattended-Upgrade "1";
EOF

cat <<EOF > /etc/apt/apt.conf.d/50unattended-upgrades
// Automatically upgrade packages from these (origin, archive) pairs
Unattended-Upgrade::Allowed-Origins {    
    // ${distro_id} and ${distro_codename} will be automatically expanded
    "${distro_id} stable";
    "${distro_id} ${distro_codename}-security";
    "${distro_id} ${distro_codename}-updates";
//  "${distro_id} ${distro_codename}-proposed-updates";
};

// List of packages to not update
Unattended-Upgrade::Package-Blacklist {
//  "vim";
//  "libc6";
//  "libc6-dev";
//  "libc6-i686";
};

// Send email to this address for problems or packages upgrades
// If empty or unset then no email is sent, make sure that you 
// have a working mail setup on your system. The package 'mailx'
// must be installed or anything that provides /usr/bin/mail.
//Unattended-Upgrade::Mail "root@localhost";

// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
Unattended-Upgrade::Remove-Unused-Dependencies "true";

// Automatically reboot *WITHOUT CONFIRMATION* if a 
// the file /var/run/reboot-required is found after the upgrade 
Unattended-Upgrade::Automatic-Reboot "true";
EOF

systemctl restart rsyslog

cat <<EOF > /etc/fail2ban/filter.d/nginx-req-limit.conf
[Definition]
failregex = limiting requests, excess:.* by zone.*client: <HOST>
EOF

cat <<EOF > /etc/fail2ban/jail.local
[DEFAULT]

# email address to receive notifications.
destemail = root@localhost    
# the email address from which to send emails.
sender = root@<fq-hostname>    
# name on the notification emails.
sendername = Fail2Ban    
# email transfer agent to use. 
mta = sendmail   

# see action.d/ufw.conf
actionban = ufw.conf
# see action.d/ufw.conf 
actionunban = ufw.conf   

[sshd]
enabled = true
port = ssh
filter = sshd
# the length of time between login attempts for maxretry. 
findtime = 600
# attempts from a single ip before a ban is imposed.
maxretry = 5
# the number of seconds that a host is banned for.
bantime = 3600

[nginx-req-limit]
enabled = true
filter = nginx-req-limit
action = iptables-multiport[name=ReqLimit, port="http,https", protocol=tcp]
logpath = /var/log/nginx/*error.log
findtime = 600
bantime = 7200
maxretry = 10
EOF

systemctl enable fail2ban

systemctl start fail2ban

/root/update_proxy.sh
